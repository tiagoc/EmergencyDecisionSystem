class Tests

types    
    public VectHospitals = seq of Hospital;
    public VectEmergency = seq of Emergency;

operations

    private assertTrue: bool ==> ()
        assertTrue(cond) == return
    pre cond;
    
    private createEmergency: () ==> ()
    createEmergency() ==
    (
        dcl pos : Location := new Location(5, 0);
        dcl patient1 : Patient := new Patient("Pacient", <Male>, 23, <Serious>, <Stroke>, 915487955);
        dcl emergency : Emergency := new Emergency(pos, patient1, <Easy>);
        
    
        -- Asserts
        assertTrue( emergency.location = pos );
        assertTrue( emergency.patient = patient1 );
        assertTrue( emergency.road = <Easy> );
    );
    
    private createHospital: () ==> ()
    createHospital() ==
    (
        dcl pos : Location := new Location(5, 0);
        dcl hospital : Hospital := new Hospital(pos, ["NONE"]);
    
        -- Asserts
        assertTrue( hospital.location = pos );
    );
    
    private TestCreateLocation: () ==> ()
    TestCreateLocation() ==
    (
        dcl tempLocation : Location := new Location();
        assertTrue(tempLocation.Pos_X = 0);
        assertTrue(tempLocation.Pos_Y = 0);
    );
    
    
    private TestCalculateDistance: () ==> ()
    TestCalculateDistance() ==
    (
        dcl tempLoc1 : Location := new Location (0,0);
        dcl tempLoc2 : Location := new Location (0,5);
        assertTrue(tempLoc1.calculate_distance(tempLoc2) = 5);
    );
    
    private createPatient: () ==> ()
    createPatient() ==
    (
        dcl patient1 : Patient := new Patient("Pacient", <Male>, 23, <Serious>, <Stroke>, 964936931);
    
        -- Asserts
        assertTrue( patient1.name  = "Pacient" );
        assertTrue( patient1.gender  = <Male> );
        assertTrue( patient1.age  = 23 );
        assertTrue( patient1.injury_status = <Serious> );
        assertTrue( patient1.contact = 964936931 );
    );
    
    private createTransport: () ==> ()
    createTransport() ==
    (
        dcl transport : Transport := new Transport(<Ambulance>);
    
        -- Asserts
        assertTrue( transport.type  = <Ambulance> );
    );
            
    private testGetByService: () ==> ()
    testGetByService() ==
    (
      dcl codu : CODU := new CODU();
      dcl hosp1 : Hospital := new Hospital( new Location(0, 0), ["General", "Operations"] );
      dcl hosp2 : Hospital := new Hospital( new Location(500, 0), ["General", "Operations", "Cardiology", "XRAY"]  );
      dcl hosp3 : Hospital := new Hospital( new Location(0, 500), ["General", "XRAY"]  );
      dcl suitable : VectHospitals := [];
      dcl HospitalsWithOperations : VectHospitals := [hosp2, hosp1];
      
      -- Add hospitals
      codu.pushHospital( hosp2 );
      codu.pushHospital( hosp1 );
      codu.pushHospital( hosp3 );
             
      suitable := codu.getHospitalsByService(codu.hospitals, "Operations" );
    	
      assertTrue(suitable = HospitalsWithOperations);
    );
    
    
    private testdetermineSalvationMeans: () ==> ()
    testdetermineSalvationMeans() ==
    (
      dcl codu : CODU := new CODU();
      dcl hosp1 : Hospital := new Hospital( new Location(0, 0), ["General", "Operations"] );
      dcl hosp2 : Hospital := new Hospital( new Location(500, 0), ["General", "Operations", "Cardiology", "XRAY"]  );
      dcl hosp3 : Hospital := new Hospital( new Location(0, 500), ["General", "XRAY", "Operations", "Cardiology"]  );
      dcl transport : Transport;
      dcl patient: Patient := new Patient("Tiago", <Male>, 23, <Medium>, <Stroke>, 964936931);
      dcl patient2: Patient := new Patient("Tiago", <Male>, 23, <Medium>, <Disease>, 964936931);
      dcl loc : Location := new Location(0,550);
      dcl accident : Emergency := new Emergency(loc, patient, <Easy>);
      dcl accident2 : Emergency := new Emergency(loc, patient2, <Hard>);
      
      -- Add hospitals
      codu.pushHospital( hosp1 );
      codu.pushHospital( hosp3 );
      codu.pushHospital( hosp2 );
      
      -- Add emergency
      codu.pushEmergency( accident );
      codu.pushEmergency( accident2 );
      
      -- Add transports
      hosp1.pushTransport( new Transport(<EmergencyCar>) );
      hosp1.pushTransport( new Transport(<Ambulance>) );
      hosp1.pushTransport( new Transport(<Heli>) );
      hosp2.pushTransport( new Transport(<Heli>) );
      hosp2.pushTransport( new Transport(<EmergencyCar>) );
      hosp2.pushTransport( new Transport(<Ambulance>) );
      hosp3.pushTransport( new Transport(<Motorcycle>) );
      hosp3.pushTransport( new Transport(<EmergencyCar>) );
      hosp3.pushTransport( new Transport(<Ambulance>) );
      hosp3.pushTransport( new Transport(<Heli>) );
      
      -- Check transport
      transport := codu.determineSalvationMeans(codu.hospitals, accident);
      
      assertTrue(transport.type=<Ambulance>);
            
      -- Check transport (for next emergency)
      transport := codu.determineSalvationMeans(codu.hospitals, accident2);
      
      assertTrue(transport.type=<Motorcycle>);
      
      -- New accident
      patient := new Patient("Tiago", <Male>, 23, <Medium>, <Labor>, 964936931);
      accident := new Emergency(loc, patient, <Moderate>);
      
      -- Add emergency
      codu.pushEmergency( accident );
      
      -- Check transport
      transport := codu.determineSalvationMeans(codu.hospitals, accident);
      
      assertTrue(transport.type=<EmergencyCar>);
    );
    
    private testNoVeihicleAvailable: () ==> ()
    testNoVeihicleAvailable() ==
    (
        dcl codu : CODU := new CODU();
        dcl hosp1 : Hospital := new Hospital( new Location(0, 0), ["General", "Operations"] );
        dcl transport : Transport;
        dcl patient: Patient := new Patient("Tiago", <Male>, 23, <Light>, <Labor>, 964936931);
        dcl loc : Location := new Location(0, 1);
        dcl accident : Emergency := new Emergency(loc, patient, <Easy>);
      
        -- Add hospitals
        codu.pushHospital( hosp1 );
        
        -- Get veihicle
        transport := codu.getBestVeihicle(hosp1.transports, accident, hosp1.location.calculate_distance(accident.location));
      
        -- No vehicle returned
        assertTrue(transport.type = <None>);
    );
        
    public static main: () ==> ()
    main() ==
    (
        -- Check all tests
        new Tests().createEmergency();
        new Tests().createHospital();
        new Tests().TestCreateLocation();
        new Tests().TestCalculateDistance();
        new Tests().createPatient();
        new Tests().createTransport();
        new Tests().testGetByService();
        new Tests().testdetermineSalvationMeans();
        new Tests().testNoVeihicleAvailable();
    );
    
    
end Tests

