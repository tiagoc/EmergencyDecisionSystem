class TestCodu

types    
    public VectHospitals = seq of Hospital;
    public VectEmergency = seq of Emergency;

operations
    private assertTrue: bool ==> ()
        assertTrue(cond) == return
    pre cond;
        
    private createCodu: () ==> ()
    createCodu() ==
    (
        dcl codu : CODU := new CODU();
        
        -- Add hospitals
        dcl hosp1 : Hospital := new Hospital( new Location(0, 0), ["Operations"] );
        dcl hosp2 : Hospital := new Hospital( new Location(500, 0), ["Operations", "Cardiology", "XRAY"]  );
        dcl tmpHospital : Hospital;
        dcl tmpTransport : Transport;
        dcl available : VectHospitals := [];
        dcl emergency : Emergency;
        
        -- Transport
        hosp1.pushTransport( new Transport(<EmergencyCar>) );
        hosp1.pushTransport( new Transport(<Ambulance>) );
        hosp1.pushTransport( new Transport(<Heli>) );
        hosp2.pushTransport( new Transport(<Heli>) );
        
        codu.pushHospital( hosp1 );
        codu.pushHospital( hosp2 );
        
        -- Emergency
        emergency := new Emergency(
                new Location(1, 0), 
                new Patient("Pacient", <Male>, 23, <Serious>, <Stroke>, 960000), 
                <Hard> 
        );
        
        codu.pushEmergency(emergency);
               
        available := codu.getAvailableHospitals( codu.hospitals );
        
        -- Not empty
        assertTrue( len available <> 0 );
               
        tmpHospital := codu.getClosestHospital( available, emergency.location );
               
        tmpTransport := codu.getBestVeihicle( 
            tmpHospital.transports, 
            emergency, 
            tmpHospital.location.calculate_distance(emergency.location)
        );
        
        --IO`println( available ); 
        IO`println( tmpTransport ); 
        
        -- Find transport
        assertTrue( tmpTransport.type <> <None> );
        
        IO`println( tmpHospital.transports );
        
        tmpHospital.transports := codu.removeTransport(tmpHospital.transports, tmpTransport);
        
        IO`println( tmpHospital.transports );
    );
    
    public testGetByService: () ==> ()
    testGetByService() ==
    (
    	dcl codu : CODU := new CODU();
  		dcl hosp1 : Hospital := new Hospital( new Location(0, 0), ["Operations"] );
      dcl hosp2 : Hospital := new Hospital( new Location(500, 0), ["Operations", "Cardiology", "XRAY"]  );
      dcl hosp3 : Hospital := new Hospital( new Location(0, 500), ["XRAY"]  );
      dcl suitable : VectHospitals := [];
      dcl HospitalsWithOperations : VectHospitals := [hosp1, hosp2];
      
      codu.pushHospital( hosp1 );
      codu.pushHospital( hosp2 );
      codu.pushHospital( hosp3 );
        
    	suitable := codu.getHospitalsByService(codu.hospitals, "Operations" );
    	
    	assertTrue(suitable = HospitalsWithOperations);
    	
    	--IO`println(suitable);
    	
    );
    

    public static main: () ==> ()
    main() ==
    (
    		
    		
        new TestCodu().createCodu();
    );
    
    
end TestCodu

