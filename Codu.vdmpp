class CODU

types    
		public String = seq of char;
    public VectHospitals = seq of Hospital;
    public VectEmergency = seq of Emergency;
    public VectTransports = seq of Transport;
    public Injury_Type = <Stroke> | <Accident> | <Disease> | <Labor> | <General>;
    
instance variables
    public hospitals : VectHospitals := [];
    public emergencies : VectEmergency := [];

operations

    public CODU: () ==> CODU
        CODU() == 
        (
            return self;
        )
    ;

    public pushHospital: Hospital ==> ()
        pushHospital(x) == hospitals := [x] ^ hospitals
    ;
        
    public pushEmergency: Emergency ==> ()
        pushEmergency(x) == emergencies := [x] ^ emergencies
    ;
    
    public removeTransport: VectTransports * Transport ==> VectTransports
    removeTransport(vect, t) ==
    (    
        dcl newVector : VectTransports := [];
        
        for i = 1 to len vect do
            if ( vect(i) <> t ) 
                then  newVector := [vect(i)] ^ newVector;
                                
        return newVector;
    )
    pre len vect > 0
    ; 
    
    public getClosestHospital: VectHospitals * Location ==> Hospital
    getClosestHospital(vect, pos) ==
    (
        dcl bestHospital : Hospital := vect(1);
    
        for i = 1 to len vect do
            if ( vect(i).location.calculate_distance(pos) < bestHospital.location.calculate_distance(pos) ) 
                then  bestHospital := vect(i); 
                                
        return bestHospital;
    )
    pre len vect > 0
    ; 
    
    public getAvailableHospitals: VectHospitals ==> VectHospitals
    getAvailableHospitals(vect) ==
    (
        dcl available : VectHospitals := [];
    
        for i = 1 to len vect do
            if ( len vect(i).transports > 0 ) 
                then available := [vect(i)] ^ available;
                
        return available;
    )
    pre len vect > 0
    ; 
    
    public getBestVeihicle: VectTransports * Emergency * real ==> Transport
    getBestVeihicle(vect, emergency, distance) ==
    (
        dcl best : Transport := new Transport(<None>);
    
        for i = 1 to len vect do
            -- Distance and velocity in metres per hour
            if ( (distance/vect(i).velocity) <= emergency.time ) --and (best.velocity = -1 or vect(i).velocity < best.velocity) )
                then if ( emergency.road = <Hard> )
                    then 
                        (if ( vect(i).type = <Motorcycle> ) 
                            then best := vect(i)
                        else if ( vect(i).type = <EmergencyCar> and best.type <> <Motorcycle> ) 
                            then best := vect(i)
                        else if ( vect(i).type = <Ambulance> and best.type <> <EmergencyCar> and best.type <> <Motorcycle> ) 
                            then best := vect(i)
                        else if ( best.type = <None> ) then best := vect(i))
                else if ( emergency.road = <Moderate> )
                    then 
                        (if ( vect(i).type = <EmergencyCar> ) 
                            then best := vect(i)
                        else if ( vect(i).type = <Ambulance> and best.type <> <EmergencyCar> ) 
                            then best := vect(i)
                        else if ( vect(i).type = <Motorcycle> and best.type <> <Ambulance> and best.type <> <EmergencyCar> ) 
                            then best := vect(i)
                        else if ( best.type = <None> ) then best := vect(i))
                else if ( emergency.road = <Easy> )
                    then 
                        (if ( vect(i).type = <Ambulance> ) 
                            then best := vect(i)
                        else if ( vect(i).type = <EmergencyCar> and best.type <> <Ambulance> ) 
                            then best := vect(i)
                        else if ( vect(i).type = <Motorcycle> and best.type <> <EmergencyCar> and best.type <> <Ambulance> ) 
                            then best := vect(i)
                        else if ( best.type = <None> ) then best := vect(i));
                        
                
        return best;    
    )   
    ; 
    
    public getHospitalsByService: VectHospitals * String ==> VectHospitals
    getHospitalsByService(vect, s) ==
    (
    	dcl suitable : VectHospitals := [];
    
    	for i = 1 to len vect do
    		for j = 1 to len vect(i).services do
    			if (vect(i).services(j) = s)
    				then suitable:= [vect(i)] ^ suitable;
    	
    	return suitable;
    )
    pre len vect > 0
    ;
    

    public determineSalvationMeans: VectHospitals * Emergency ==> Transport
    determineSalvationMeans(vect, emergency) ==
    (
    	dcl avail : VectHospitals := getAvailableHospitals(vect);
    	dcl injury_type : Injury_Type := emergency.patient.injury_type;
    	dcl suitable : VectHospitals;
    	dcl closest : Hospital;
    	dcl transport : Transport;
    	dcl distance : real;
    	
    	--IO`println(avail); 
    	
    	cases injury_type:
    		<General> -> (
    									suitable := getHospitalsByService(avail, "General");
    								 ),
    		<Stroke> -> (
    									suitable := getHospitalsByService(avail, "Cardiology");
    								 ),
    		<Accident> -> (
    									suitable := getHospitalsByService(avail, "XRAY");
    								 ),						 						 
    		<Disease> -> (
    									suitable := getHospitalsByService(avail, "General");
    								 ),
    		<Labor> -> (
    									suitable := getHospitalsByService(avail, "Operations");
    								 )
    	end;		
    	
    	closest := 	getClosestHospital(suitable, emergency.location);
    	
    	distance := closest.location.calculate_distance(emergency.location);
    	
    	transport := getBestVeihicle(closest.transports, emergency.time, distance); 
    		
    	return transport;
    )
    pre len vect > 0
    ;
    

end CODU